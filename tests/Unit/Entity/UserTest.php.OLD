<?php

namespace App\Tests\Entity;


use App\DataFixtures\CustomerFixtures;
use App\Entity\User;
use Liip\TestFixturesBundle\Test\FixturesTrait;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Validator\ConstraintViolation;
use App\Repository\CustomerRepository;

class UserTest extends KernelTestCase
{
    use FixturesTrait;

    public function testValidateUserEntity()
    {
        $this->assertHasErrors($this->createUserEntity(), 0);
    }

    // public function testNoValidateLastnameUserEntity()
    // {
    //     $this->assertHasErrors($this->createUserEntity()->setLastname(''), 1);
    // }

    // public function testNoValidateUsernameUserEntity()
    // {
    //     $this->loadFixtures([UserFixtures::class]);
    //     $this->assertHasErrors($this->createUserEntity()->setUsername('user_5'), 1);
    //     $this->assertHasErrors($this->createUserEntity()->set(''), 2);
    // }

    // public function testNoValidateEmailUserEntity()
    // {
    //     $this->assertHasErrors($this->createUserEntity()->setEmail('test-test.com'), 1);
    //     $this->assertHasErrors($this->createUserEntity()->setEmail(''), 1);
    // }

    // public function testNoValidateFirstNameUserEntity()
    // {
    //     $this->assertHasErrors($this->createUserEntity()->setFirstName(''), 1);
    // }

    // public function testNoValidateLastNameUserEntity()
    // {
    //     $this->assertHasErrors($this->createUserEntity()->setLastName(''), 1);
    // }

    // public function testNoValidatePathLogoUserEntity(){
    //     $this->assertHasErrors($this->createUserEntity()->setPathLogo('doc.pdf'), 1, ['Default','phpUnitTest']);
    // }

    /**
     * @return User
     */
    private function createUserEntity():User
    {

        
        // $this->loadFixtures([CustomerFixtures::class]);

        // /** @var@ User $user */
        // $customers = self::$container->get(CustomerRepository::class)->findAll();

        

        // var_dump($customers);
        // die('ko');

        // return (new User())
        //     ->setFirstname('John')
        //     ->setLastname('Doe')
        //     ->setUsername('jdoe')
        //     ->setEmail('jdoe@yopmail.fr')
        //     ->setCustomer($customers);
    }

    

    /**
     * @param User $User
     * @param int $number
     * @param array $groups
     */
    public function assertHasErrors(User $User, int $number = 0, $groups = ['Default'])
    {
        self::bootKernel();
        $errors = self::$container->get('validator')->validate($User, $constraints = null, $groups );
        $messages =[];
        /** @var ConstraintViolation $error */
        foreach ($errors as $error)
        {
            $messages[] = $error->getPropertyPath(). ' => ' . $error->getMessage();
        }
        $this->assertCount($number, $errors, implode(',', $messages));
    }
}